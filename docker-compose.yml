version: '2'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    build: .
    ports:
            - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.23.150.104
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.23.150.104:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      #https://github.com/wurstmeister/kafka-docker/issues/100
      KAFKA_RESERVED_BROKER_MAX_ID: 1001
      KAFKA_BROKER_ID: 1001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    restart: always

  ksql:
      image: confluentinc/cp-ksql-server:5.2.1
      hostname: ksql-cli
      depends_on:
        - kafka
      environment:
        KSQL_BOOTSTRAP_SERVERS: kafka:9092
        KSQL_LISTENERS: http://0.0.0.0:8088
        KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181

  kafka-connect-cp:
    image: confluentinc/cp-kafka-connect:5.2.1
    ports:
      - "18083:18083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 18083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-cp"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/dbz-mysql-jar-leach'
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    volumes:
      - $PWD/scripts:/scripts
      - $PWD/kafka-connect-jdbc/mysql-connector-java-5.1.45-bin.jar:/usr/share/java/kafka-connect-jdbc/mysql-connector-java-5.1.45-bin.jar
      - db-leach:/db-leach/
      - dbz-mysql-jar-leach:/dbz-mysql-jar-leach

  postgres:
    image: debezium/postgres:10.0
    ports:
      - "5432:5432"
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
    volumes:
     - ./sql/schema.sql:/docker-entrypoint-initdb.d/z99_dump.sql

  connect-debezium:
    image: debezium/connect:0.9.3.Final
    depends_on:
      - kafka
      - postgres
      - schema-registry
    # ports:
    #  - 18083:18083
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
    #  - REST_PORT=18083
    #  - ADVERTISED_PORT=18083
    #  - ADVERTISED_HOST_NAME="connect-debezium"
      - GROUP_ID=connect-debezium
      - CONFIG_STORAGE_TOPIC=connect-debezium-configs
      - OFFSET_STORAGE_TOPIC=connect-debezium-offsets
      - STATUS_STORAGE_TOPIC=connect-debezium-status
      - KEY_CONVERTER=io.confluent.connect.avro.AvroConverter
      - VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter
      - CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
    volumes:
      - dbz-mysql-jar-leach:/kafka/connect
    
volumes:
    db-leach: {}
    dbz-mysql-jar-leach: {}
